/*
 * GracenoteOnConnectDataDeliveryAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.tmsapi.data.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.tmsapi.data.*;
import com.tmsapi.data.models.*;
import com.tmsapi.data.exceptions.*;
import com.tmsapi.data.http.client.HttpClient;
import com.tmsapi.data.http.client.HttpContext;
import com.tmsapi.data.http.request.HttpRequest;
import com.tmsapi.data.http.response.HttpResponse;
import com.tmsapi.data.http.response.HttpStringResponse;
import com.tmsapi.data.http.client.APICallBack;

public class MoviesOnTVController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static MoviesOnTVController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the MoviesOnTVController class 
     */
    public static MoviesOnTVController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new MoviesOnTVController();
            }
        }
        return instance;
    }

    /**
     * Returns all versions of a given movie. *Available with R&amp;D/Commercial plans only.
     * @param    rootId    Required parameter: Movie Root ID
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @param    descriptionLang    Required parameter: Filter results based on the specified description language. When not specified, returns English versions, or if no English descriptions available, returns versions with descriptionLang of primary TMS ID. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @return    Returns the void response from the API call 
     */
    public void getMovieVersionsAsync(
                final String rootId,
                final String imageSize,
                final String imageText,
                final String descriptionLang,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/rootId/versions");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4884596639948670578L;
            {
                    put( "rootId", rootId );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
                    put( "descriptionLang", descriptionLang );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5609824947607635214L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns all airings of a movie for a given lineup and time period up to 14 days in advance.
     * @param    rootId    Required parameter: Movie Root ID
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeDetail    Required parameter: Boolean indicating whether to include detailed movie metadata with each airing. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @param    descriptionLang    Required parameter: Optional filter based on specified description language. If not specified, all airings of movie returned. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @return    Returns the void response from the API call 
     */
    public void getMovieAiringsAsync(
                final String rootId,
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeDetail,
                final String imageSize,
                final String imageText,
                final String descriptionLang,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/rootId/airings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5417202920115336445L;
            {
                    put( "rootId", rootId );
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeDetail", includeDetail );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
                    put( "descriptionLang", descriptionLang );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5125634022958417578L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns movies and associated metadata that are airing on a lineup for a given time period up to 24 hours in length and up to 14 days in advance.
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeAdult    Required parameter: Boolean indicating whether to include adult TV shows in response. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @param    descriptionLang    Required parameter: Optional filter based on specified description language. If not specified, all movies airings returned. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @return    Returns the void response from the API call 
     */
    public void getAllMoviesAiringOnTVAsync(
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeAdult,
                final String imageSize,
                final String imageText,
                final String descriptionLang,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/airings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5672153791323909945L;
            {
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeAdult", includeAdult );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
                    put( "descriptionLang", descriptionLang );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5190312732381825706L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}