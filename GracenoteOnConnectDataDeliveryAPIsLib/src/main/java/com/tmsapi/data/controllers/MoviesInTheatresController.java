/*
 * GracenoteOnConnectDataDeliveryAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.tmsapi.data.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.tmsapi.data.*;
import com.tmsapi.data.models.*;
import com.tmsapi.data.exceptions.*;
import com.tmsapi.data.http.client.HttpClient;
import com.tmsapi.data.http.client.HttpContext;
import com.tmsapi.data.http.request.HttpRequest;
import com.tmsapi.data.http.response.HttpResponse;
import com.tmsapi.data.http.response.HttpStringResponse;
import com.tmsapi.data.http.client.APICallBack;

public class MoviesInTheatresController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static MoviesInTheatresController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the MoviesInTheatresController class 
     */
    public static MoviesInTheatresController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new MoviesInTheatresController();
            }
        }
        return instance;
    }

    /**
     * Returns a list of theatres for a given zip/postal code or coordinates.
     * @param    zip    Required parameter: US zip code or Canadian postal code. Must supply either zip or coordinates.
     * @param    lat    Required parameter: Latitude coordinate. Valid values are between -90 and 90. Must supply either zip or coordinates.
     * @param    lng    Required parameter: Longitude coordinate. Valid values are between -180 and 180. Must supply either zip or coordinates.
     * @param    radius    Required parameter: Range to search from initial location. Defaults to 5 miles. Maximum 100 mi (160 km).
     * @param    units    Required parameter: Unit of measurement for the radius parameter as well as the distance value in response.  Defaults to miles. (Acceptable values are: "", "mi", "km")
     * @param    numTheatres    Required parameter: Maximum number of theatres to return. If not specified, response will include max 100 theatres within specified radius.
     * @return    Returns the void response from the API call 
     */
    public void findTheatresAsync(
                final String zip,
                final String lat,
                final String lng,
                final String radius,
                final String units,
                final String numTheatres,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/theatres");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5071629144475632486L;
            {
                    put( "zip", zip );
                    put( "lat", lat );
                    put( "lng", lng );
                    put( "radius", radius );
                    put( "units", units );
                    put( "numTheatres", numTheatres );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4848733833666129724L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns details for a specified theatre. *Available with R&amp;D/Commercial plans only.
     * @param    theatreId    Required parameter: Theatre ID.
     * @return    Returns the void response from the API call 
     */
    public void getTheatreDetailsAsync(
                final String theatreId,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/theatres/theatreId");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5453323209515346098L;
            {
                    put( "theatreId", theatreId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5152628347173904340L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of all movies and showtimes at a theatre for a given day(s).
     * @param    theatreId    Required parameter: Theatre ID.
     * @param    startDate    Required parameter: Start date (yyyy-mm-dd). Schedules available starting with current day.
     * @param    numDays    Required parameter: Number of schedule days. Defaults to 1.
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getTheatreShowtimesAsync(
                final String theatreId,
                final String startDate,
                final String numDays,
                final String imageSize,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/theatres/theatreId/showings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5723509765314833735L;
            {
                    put( "theatreId", theatreId );
                    put( "startDate", startDate );
                    put( "numDays", numDays );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5222444636575396280L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns movie metadata and theatre/showtimes information for a specified movie.
     * @param    movieId    Required parameter: tmsId or rootId.
     * @param    startDate    Required parameter: Start date (yyyy-mm-dd). Schedules available starting with current day.
     * @param    numDays    Required parameter: Number of schedule days. Defaults to 1.
     * @param    zip    Required parameter: US zip code or Canadian postal code. Must supply either zip or coordinates.
     * @param    lat    Required parameter: Latitude coordinate. Valid values are between -90 and 90. Must supply either zip or coordinates.
     * @param    lng    Required parameter: Longitude coordinate. Valid values are between -180 and 180. Must supply either zip or coordinates.
     * @param    radius    Required parameter: Range to search from initial location. Defaults to 5 miles. Maximum 100 mi (160 km).
     * @param    units    Required parameter: Unit of measurement for the radius parameter as well as the distance value in response.  Defaults to miles. (Acceptable values are: "", "mi", "km")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getMovieShowtimesSingleMovieAsync(
                final String movieId,
                final String startDate,
                final String numDays,
                final String zip,
                final String lat,
                final String lng,
                final String radius,
                final String units,
                final String imageSize,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/movieId/showings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4727442720091447828L;
            {
                    put( "movieId", movieId );
                    put( "startDate", startDate );
                    put( "numDays", numDays );
                    put( "zip", zip );
                    put( "lat", lat );
                    put( "lng", lng );
                    put( "radius", radius );
                    put( "units", units );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5588526136478780247L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of all movies currently playing in local theatres, with showtimes.
     * @param    startDate    Required parameter: Start date (yyyy-mm-dd). Schedules available starting with current day.
     * @param    numDays    Required parameter: Number of schedule days. Defaults to 1.
     * @param    zip    Required parameter: US zip code or Canadian postal code. Must supply either zip or coordinates.
     * @param    lat    Required parameter: Latitude coordinate. Valid values are between -90 and 90. Must supply either zip or coordinates.
     * @param    lng    Required parameter: Longitude coordinate. Valid values are between -180 and 180. Must supply either zip or coordinates.
     * @param    radius    Required parameter: Range to search from initial location. Defaults to 5 miles. Maximum 100 mi (160 km).
     * @param    units    Required parameter: Unit of measurement for the radius parameter as well as the distance value in response.  Defaults to miles. (Acceptable values are: "", "mi", "km")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getMoviesPlayingInLocalTheatresAsync(
                final String startDate,
                final String numDays,
                final String zip,
                final String lat,
                final String lng,
                final String radius,
                final String units,
                final String imageSize,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/showings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4811025494408172475L;
            {
                    put( "startDate", startDate );
                    put( "numDays", numDays );
                    put( "zip", zip );
                    put( "lat", lat );
                    put( "lng", lng );
                    put( "radius", radius );
                    put( "units", units );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5587922848996113966L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of movies and associated metadata being released on a given date provided and up to 6 months into the future. *Available with R&amp;D/Commercial plans only.
     * @param    releaseDate    Required parameter: Start date (yyyy-mm-dd). Can be up to 7 days prior to current date.
     * @param    numDays    Required parameter: Number of days to search. Defaults to 60. Maximum 180.
     * @param    country    Required parameter: Returns releases for specified country (USA or CAN). Defaults to USA. (Acceptable values are: "", "USA", "CAN")
     * @param    titleLang    Required parameter: Filter results based on the specified title language (e.g., en=English). If not specified, defaults to en.
     * @param    descriptionLang    Required parameter: Filter results based on the specified description language (e.g., es=Spanish). If not specified, defaults to en.
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getFutureReleasesAsync(
                final String releaseDate,
                final String numDays,
                final String country,
                final String titleLang,
                final String descriptionLang,
                final String imageSize,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/futureReleases");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4821706177523598796L;
            {
                    put( "releaseDate", releaseDate );
                    put( "numDays", numDays );
                    put( "country", country );
                    put( "titleLang", titleLang );
                    put( "descriptionLang", descriptionLang );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5239932715095588148L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}