/*
 * GracenoteOnConnectDataDeliveryAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.tmsapi.data.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.tmsapi.data.*;
import com.tmsapi.data.models.*;
import com.tmsapi.data.exceptions.*;
import com.tmsapi.data.http.client.HttpClient;
import com.tmsapi.data.http.client.HttpContext;
import com.tmsapi.data.http.request.HttpRequest;
import com.tmsapi.data.http.response.HttpResponse;
import com.tmsapi.data.http.response.HttpStringResponse;
import com.tmsapi.data.http.client.APICallBack;

public class ProgramsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static ProgramsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the ProgramsController class 
     */
    public static ProgramsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new ProgramsController();
            }
        }
        return instance;
    }

    /**
     * Returns basic program metatdata based on free-form search criteria.
     * @param    q    Required parameter: Query string.
     * @param    queryFields    Required parameter: Comma-separated list of fields in which the search string is queried against. Valid fields are title, description, cast, genres, directors and keywords. Do not include spaces in list.
     * @param    entityType    Required parameter: Comma-separated list of program types to search. Valid values are movie, episode, sports, show. Do not include spaces in list.
     * @param    genres    Required parameter: Filter results by the specified comma-separated list of genres. See Program Genres method for available genres.
     * @param    includeAdult    Required parameter: Boolean indicating whether to include programs with 'Adults Only' genre in response. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    titleLang    Required parameter: Filter results based on the specified title language (e.g., en=English, es=Spanish, en-GB=British English, pt-BR=Brazilian Portugese) (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @param    descriptionLang    Required parameter: Filter results based on the specified description language, using IETF language tags. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @param    limit    Required parameter: The maximum number of results to be returned from the query. Valid values are between 1 and 50. Default is 10.
     * @param    offset    Required parameter: Zero-based offset index on the result set. Used in conjunction with limit to page through results. For example, offset=10 will set response data to begin with 11th hit.
     * @param    lineupId    Required parameter: Lineup ID. If specified, response will include only programs found in the schedule and list their airings under each program summary. If not specified, all programs matching the query will be returned, and no airings will be listed.
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601). Defaults to start of current hour. Only used when lineupId is specified. Example: 2013-03-05T22:00Z
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). If not specified, airings will be shown chronologically from the startDateTime, up to the maximum of 50 per program. Only used when lineupId is specified.
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getProgramSearchAsync(
                final String q,
                final String queryFields,
                final String entityType,
                final String genres,
                final String includeAdult,
                final String titleLang,
                final String descriptionLang,
                final String limit,
                final String offset,
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/search");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5027701187209192558L;
            {
                    put( "q", q );
                    put( "queryFields", queryFields );
                    put( "entityType", entityType );
                    put( "genres", genres );
                    put( "includeAdult", includeAdult );
                    put( "titleLang", titleLang );
                    put( "descriptionLang", descriptionLang );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5356472038570333381L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns detailed metadata for any TMS program ID (Movie, Show, Episode, or Sports).
     * @param    tmsId    Required parameter: TMS ID
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getProgramDetailsAsync(
                final String tmsId,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/tmsId");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4873315517979023819L;
            {
                    put( "tmsId", tmsId );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5050743100212919420L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns all airings of a specific program for a given lineup and time period up to 14 days in advance.
     * @param    tmsId    Required parameter: TMS ID
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeDetail    Required parameter: Boolean indicating whether to include detailed program metadata with each airing. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getProgramAiringsAsync(
                final String tmsId,
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeDetail,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/tmsId/airings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4863122630367631311L;
            {
                    put( "tmsId", tmsId );
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeDetail", includeDetail );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5212154014988001839L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns all shows and episodes and associated metadata airing new (or live) on a lineup for a given time period up to 24 hours in length and up to 14 days in advance.
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeAdult    Required parameter: Boolean indicating whether to include adult TV shows in response. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getNewShowsAiringOnTVAsync(
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeAdult,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/newShowAirings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5688222838554937719L;
            {
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeAdult", includeAdult );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5730548752945151276L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns all shows and episodes and associated metadata that aired new (or live) for given past dates up to 7 days. *Available with R&amp;D/Commercial plans only.
     * @param    startDate    Required parameter: Date to start (yyyy-mm-dd).
     * @param    endDate    Required parameter: Date to end (yyyy-mm-dd). Defaults to startDate.
     * @param    includeAdult    Required parameter: Boolean indicating whether to include adult TV shows in response. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getNewShowsThatAiredInLastWeekAsync(
                final String startDate,
                final String endDate,
                final String includeAdult,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/newShowsLastWeek");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5243725655902424744L;
            {
                    put( "startDate", startDate );
                    put( "endDate", endDate );
                    put( "includeAdult", includeAdult );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5101218807878932478L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of notable TV programming and associated metadata due to air at future date. *Available with R&amp;D/Commercial plans only.
     * @param    startDate    Required parameter: Date to start (yyyy-mm-dd).
     * @param    endDate    Required parameter: Date to end (yyyy-mm-dd). Defaults to 31 days after startDate.
     * @param    eventCode    Required parameter: Comma-separated list corresponding to selected event type codes. Default will return all types. (Acceptable values are: "", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11")
     * @param    titleLang    Required parameter: Filter results based on the specified title language (e.g., en=English, es=Spanish, en-GB=British English, pt-BR=Brazilian Portugese) (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @param    descriptionLang    Required parameter: Preference for description language to be returned. If specified descriptionLang not found for series, reverts to primary TMS ID for series. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @param    imageSize    Required parameter: Size of the images to be returned. If not specified, images in all available sizes will be returned. (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the images to be returned. Only applies to TV content. If not specified, images in all available aspect ratios will be returned. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getAdvancePlannerAsync(
                final String startDate,
                final String endDate,
                final String eventCode,
                final String titleLang,
                final String descriptionLang,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/advancePlanner");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5241461395183955623L;
            {
                    put( "startDate", startDate );
                    put( "endDate", endDate );
                    put( "eventCode", eventCode );
                    put( "titleLang", titleLang );
                    put( "descriptionLang", descriptionLang );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5080256393618782788L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns all available images associated with a program. *Available with R&amp;D/Commercial plans only.
     * @param    resourceId    Required parameter: tmsId or rootId for program
     * @param    imageSize    Required parameter: If specified, only images in selected size will be included. Default will return all available image sizes. (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: If specified, only images in selected aspect ratio will be included. Only applies to TV content. Default will return images in all available aspect ratios. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating filter for image types with or without text. If not specified, will return all image types. (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getAllProgramImagesAsync(
                final String resourceId,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/resourceId/images");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4756845889384888026L;
            {
                    put( "resourceId", resourceId );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5734017740643804747L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns a list of program genres, to be used in conjunction with Program Search. Note: language parameter deprecated in v1.1.
     * @return    Returns the void response from the API call 
     */
    public void getProgramGenresAsync(
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/genres");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5456740658484175930L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}