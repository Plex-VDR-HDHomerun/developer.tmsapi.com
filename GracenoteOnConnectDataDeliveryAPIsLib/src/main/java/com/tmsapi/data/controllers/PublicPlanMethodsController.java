/*
 * GracenoteOnConnectDataDeliveryAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.tmsapi.data.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.tmsapi.data.*;
import com.tmsapi.data.models.*;
import com.tmsapi.data.exceptions.*;
import com.tmsapi.data.http.client.HttpClient;
import com.tmsapi.data.http.client.HttpContext;
import com.tmsapi.data.http.request.HttpRequest;
import com.tmsapi.data.http.response.HttpResponse;
import com.tmsapi.data.http.response.HttpStringResponse;
import com.tmsapi.data.http.client.APICallBack;

public class PublicPlanMethodsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static PublicPlanMethodsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the PublicPlanMethodsController class 
     */
    public static PublicPlanMethodsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new PublicPlanMethodsController();
            }
        }
        return instance;
    }

    /**
     * Returns a list of all movies currently playing in local theatres, with showtimes.
     * @param    startDate    Required parameter: Start date (yyyy-mm-dd). Schedules available starting with current day.
     * @param    numDays    Required parameter: Number of schedule days. Defaults to 1.
     * @param    zip    Required parameter: US zip code or Canadian postal code. Must supply either zip or coordinates.
     * @param    lat    Required parameter: Latitude coordinate. Valid values are between -90 and 90. Must supply either zip or coordinates.
     * @param    lng    Required parameter: Longitude coordinate. Valid values are between -180 and 180. Must supply either zip or coordinates.
     * @param    radius    Required parameter: Range to search from initial location. Defaults to 5 miles. Maximum 100 mi (160 km).
     * @param    units    Required parameter: Unit of measurement for the radius parameter as well as the distance value in response.  Defaults to miles. (Acceptable values are: "", "mi", "km")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getMoviesPlayingInLocalTheatresAsync(
                final String startDate,
                final String numDays,
                final String zip,
                final String lat,
                final String lng,
                final String radius,
                final String units,
                final String imageSize,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/showings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5357457433264841680L;
            {
                    put( "startDate", startDate );
                    put( "numDays", numDays );
                    put( "zip", zip );
                    put( "lat", lat );
                    put( "lng", lng );
                    put( "radius", radius );
                    put( "units", units );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4924669577920480910L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Return all shows and episodes and associated metadata airing new (or live) on a lineup for a given time period up to 24 hours in length and up to 14 days in advance.
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeAdult    Required parameter: Boolean indicating whether to include adult TV shows in response. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getNewShowsAiringOnTVAsync(
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeAdult,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/programs/newShowAirings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5571011112731360888L;
            {
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeAdult", includeAdult );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5234453263300527263L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns live sports events and associated metadata for a list of sports that are airing on a lineup for a given time period up to 24 hours in length and up to 14 days in advance.
     * @param    sportsId    Required parameter: A comma-separated list of sports genre ids (e.g., 58 for baseball, 59 for basketball) or 'all' to return airings for all sports.
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    liveOnly    Required parameter: Boolean indicating whether to only include live events. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @return    Returns the void response from the API call 
     */
    public void getAiringsOfSportsEventsAsync(
                final String sportsId,
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String liveOnly,
                final String imageSize,
                final String imageAspectTV,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/sports/sportsId/events/airings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4827587117533735563L;
            {
                    put( "sportsId", sportsId );
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "liveOnly", liveOnly );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5221247404266428253L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Return movies and associated metadata that are airing on a lineup for a given time period up to 24 hours in length and up to 14 days in advance.
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeAdult    Required parameter: Boolean indicating whether to include adult TV shows in response. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @return    Returns the void response from the API call 
     */
    public void getMoviesAiringOnTVAsync(
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeAdult,
                final String imageSize,
                final String imageText,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/movies/airings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4920911770296002599L;
            {
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeAdult", includeAdult );
                    put( "imageSize", imageSize );
                    put( "imageText", imageText );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5391379534599413268L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}