/*
 * GracenoteOnConnectDataDeliveryAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.tmsapi.data.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.tmsapi.data.*;
import com.tmsapi.data.models.*;
import com.tmsapi.data.exceptions.*;
import com.tmsapi.data.http.client.HttpClient;
import com.tmsapi.data.http.client.HttpContext;
import com.tmsapi.data.http.request.HttpRequest;
import com.tmsapi.data.http.response.HttpResponse;
import com.tmsapi.data.http.response.HttpStringResponse;
import com.tmsapi.data.http.client.APICallBack;

public class SeriesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static SeriesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SeriesController class 
     */
    public static SeriesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new SeriesController();
            }
        }
        return instance;
    }

    /**
     * Returns detailed metadata for a given series.
     * @param    seriesId    Required parameter: Series ID
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @param    titleLang    Required parameter: Filter results based on the specified title language (e.g., en=English, es=Spanish, en-GB=British English, pt-BR=Brazilian Portugese) (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @param    descriptionLang    Required parameter: Preference for description language to be returned. If specified descriptionLang not found for series, reverts to primary TMS ID for series. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @return    Returns the void response from the API call 
     */
    public void getSeriesDetailsAsync(
                final String seriesId,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final String titleLang,
                final String descriptionLang,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/series/seriesId");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5395723524469295448L;
            {
                    put( "seriesId", seriesId );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
                    put( "titleLang", titleLang );
                    put( "descriptionLang", descriptionLang );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4700548770088919946L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns all airings of a series for a given lineup and time period up to 14 days in advance.
     * @param    seriesId    Required parameter: Series ID
     * @param    lineupId    Required parameter: Lineup ID
     * @param    startDateTime    Required parameter: Date/Time to start from (ISO 8601).
     * @param    endDateTime    Required parameter: Date/Time to end on (ISO 8601). Defaults to startDateTime plus three hours.
     * @param    includeDetail    Required parameter: Boolean indicating whether to include detailed program metadata with each airing. Defaults to false. (Acceptable values are: "", "true", "false")
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @param    descriptionLang    Required parameter: Optional filter based on specified description language. If not specified, all series airings returned. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @return    Returns the void response from the API call 
     */
    public void getSeriesAiringsAsync(
                final String seriesId,
                final String lineupId,
                final String startDateTime,
                final String endDateTime,
                final String includeDetail,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final String descriptionLang,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/series/seriesId/airings");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5468016742349010118L;
            {
                    put( "seriesId", seriesId );
                    put( "lineupId", lineupId );
                    put( "startDateTime", startDateTime );
                    put( "endDateTime", endDateTime );
                    put( "includeDetail", includeDetail );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
                    put( "descriptionLang", descriptionLang );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5003962776057362960L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns episodes of a series, sorted by season and episode numbers. If limit/offset parameters not provided, will return up to maximum of 100 episodes. If limit/offset parameters provided, response will be wrapped in object with hitCount (total number of episodes) for paging.
     * @param    seriesId    Required parameter: Series ID
     * @param    season    Required parameter: Season number. If not specified, will return episodes from all seasons.
     * @param    size    Required parameter: Amount of program metadata to be returned for episodes. The default value is Detailed. For smaller response size, use Basic. (Acceptable values are: "", "Basic", "Detailed")
     * @param    limit    Required parameter: The maximum number of results to be returned from the query. Default is 100.
     * @param    offset    Required parameter: Zero-based offset index on the result set. Used in conjunction with limit to page through results. For example, offset=10 will set response data to begin with 11th hit.
     * @param    imageSize    Required parameter: Size of the image referenced by the preferred image URI returned. The default value is Md (medium) (Acceptable values are: "", "Sm", "Md", "Lg", "Ms")
     * @param    imageAspectTV    Required parameter: Aspect ratio of the image referenced by the preferred image URI returned. Only applies to TV content. The default value is 2x3. (Acceptable values are: "", "2x3", "3x4", "4x3", "16x9")
     * @param    imageText    Required parameter: Boolean indicating preference for image with or without text. If no image is found matching text preference, next available image will be returned. Defaults to true (prefer images with text). (Acceptable values are: "", "true", "false")
     * @param    titleLang    Required parameter: Filter results based on the specified title language (e.g., en=English, es=Spanish, en-GB=British English, pt-BR=Brazilian Portugese) (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @param    descriptionLang    Required parameter: Set preference for description language to be returned. If specified descriptionLang not found for episode, reverts to primary TMS ID for episode. (Acceptable values are: "", "da", "de", "en", "en-GB", "es", "fi", "fr", "fr-CA", "it", "nl", "no", "pt", "pt-BR", "sv")
     * @return    Returns the void response from the API call 
     */
    public void getSeriesEpisodesAsync(
                final String seriesId,
                final String season,
                final String size,
                final String limit,
                final String offset,
                final String imageSize,
                final String imageAspectTV,
                final String imageText,
                final String titleLang,
                final String descriptionLang,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/series/seriesId/episodes");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5001191578303874667L;
            {
                    put( "seriesId", seriesId );
                    put( "season", season );
                    put( "size", size );
                    put( "limit", limit );
                    put( "offset", offset );
                    put( "imageSize", imageSize );
                    put( "imageAspectTV", imageAspectTV );
                    put( "imageText", imageText );
                    put( "titleLang", titleLang );
                    put( "descriptionLang", descriptionLang );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5620386256736052297L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}