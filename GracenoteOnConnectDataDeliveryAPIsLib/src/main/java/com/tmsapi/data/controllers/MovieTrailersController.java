/*
 * GracenoteOnConnectDataDeliveryAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.tmsapi.data.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.tmsapi.data.*;
import com.tmsapi.data.models.*;
import com.tmsapi.data.exceptions.*;
import com.tmsapi.data.http.client.HttpClient;
import com.tmsapi.data.http.client.HttpContext;
import com.tmsapi.data.http.request.HttpRequest;
import com.tmsapi.data.http.response.HttpResponse;
import com.tmsapi.data.http.response.HttpStringResponse;
import com.tmsapi.data.http.client.APICallBack;

public class MovieTrailersController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static MovieTrailersController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the MovieTrailersController class 
     */
    public static MovieTrailersController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new MovieTrailersController();
            }
        }
        return instance;
    }

    /**
     * Returns movie trailer metadata for one or more assets, with option for embeddable player links. A ScreenPlay customer agreement is required for production use.
     * @param    rootids    Required parameter: Comma-separated list of movie rootIds.
     * @param    bitrateids    Required parameter: Comma-separated list of one or more encode bitrates. If omitted, all encode bitrates available per customer agreement will be returned. (Acceptable values are: "", "10", "214", "267", "268", "269", "270", "308", "310", "312", "314", "382", "449", "452", "455", "456", "457", "460", "461", "471", "472")
     * @param    trailersonly    Required parameter: Filter by video asset type. 0 (default) returns trailers and extras. 1 returns trailers only. (Acceptable values are: "", "0", "1")
     * @param    languageid    Required parameter: Return trailers in specified language only. Defaults to English. See documentation for Screenplay language codes.
     * @param    playerUrl    Required parameter: 0 (default) returns bounce links, which require developer to supply appropriate player for format. 1 returns embeddable player links. (Acceptable values are: "", "0", "1")
     * @param    bestEclip    Required parameter: 0 (default) returns all video assets for each rootId. 1 returns most recent trailer asset. (Acceptable values are: "", "0", "1")
     * @return    Returns the void response from the API call 
     */
    public void getScreenPlayTrailersAsync(
                final String rootids,
                final String bitrateids,
                final String trailersonly,
                final String languageid,
                final String playerUrl,
                final String bestEclip,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/v1.1/screenplayTrailers");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5660715914175041114L;
            {
                    put( "rootids", rootids );
                    put( "bitrateids", bitrateids );
                    put( "trailersonly", trailersonly );
                    put( "languageid", languageid );
                    put( "player_url", playerUrl );
                    put( "best_eclip", bestEclip );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5247093001722738545L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}